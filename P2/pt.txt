#include <iostream>
#include <cstdlib>
#include "p2.h"

int size(list_t list) {
	if(list_isEmpty(list)) {
		return 0;
	}
	else {
		return 1 + size(list_rest(list));
	}
} 
/* 
// EFFECTS: Returns the number of elements in "list".
//          Returns zero if "list" is empty.
*/ 

int sum(list_t list) {
	if(list_isEmpty(list)) {
		return 0;
	}
	else {
		return list_first(list) + sum(list_rest(list));
	}
}
/* 
// EFFECTS: Returns the sum of each element in "list".
//          Returns zero if "list" is empty.
*/ 

int product(list_t list) {
	if(list_isEmpty(list)) {
		return 1;
	}
	else {
		return list_first(list) * product(list_rest(list));
	}
}
/* 
// EFFECTS: Returns the product of each element in "list".
//          Returns one if "list" is empty.
*/

int accumulate(list_t list, int (*fn)(int, int), int base) {
	if(list_isEmpty(list)) {
		return base;
	}
	else {
		return fn(list_first(list), accumulate(list_rest(list), fn, base));
	}
}
/*
// REQUIRES: "fn" must be associative.
//
// EFFECTS: Returns "base" if "list" is empty.
//          Returns fn(list_first(list), 
//                      accumulate(list_rest(list), fn, base) otherwise.
//
// For example, if you have the following function:
//
//           int add(int x, int y);
//
// Then the following invocation returns the sum of all elements:
//
//           accumulate(list, add, 0);
*/ 

static list_t reverse_helper(list_t new_list, list_t old_list) {
	if(list_isEmpty(old_list)) {
		return new_list;
	}
	else {
		return reverse_helper(list_make(list_first(old_list), new_list), list_rest(old_list));
	}
}

list_t reverse(list_t list) {
	return reverse_helper(list_make(list_first(list), list_make()), list_rest(list));
}
/*
// EFFECTS: Returns the reverse of "list".
//
// For example: the reverse of ( 3 2 1 ) is ( 1 2 3 )
*/

static list_t append_helper(list_t first, list_t second) {
	if(list_isEmpty(first)) {
		return second;
	}
	else {
		return append_helper(list_rest(first), list_make(list_first(first), second));
	}
}

list_t append(list_t first, list_t second) {
	if(list_isEmpty(first)) {
		return second;
	}
	else {
		first = reverse(first);
		return append_helper(first, second);
	}
}
/*
// EFFECTS: Returns the list (first second).
//
// For example: append(( 2 4 6 ), ( 1 3 )) gives
// the list ( 2 4 6 1 3 ).
*/ 

list_t filter_odd(list_t list) {
	if(list_isEmpty(list)) {
		return list_make();
	}
	else if((list_first(list) % 2) != 0) {
		return list_make(list_first(list), filter_odd(list_rest(list)));
	}
	else {
		return filter_odd(list_rest(list));
	}
}
/*
// EFFECTS: Returns a new list containing only the elements of the
//          original "list" which are odd in value, 
//          in the order in which they appeared in list.
//
// For example, if you apply filter_odd to the list ( 3 4 1 5 6 ),
// you would get the list ( 3 1 5 ).
*/ 

list_t filter_even(list_t list) {
	if(list_isEmpty(list)) {
		return list_make();
	}
	else if(list_first(list) % 2 == 0) {
		return list_make(list_first(list), filter_even(list_rest(list)));
	}
	else {
		return filter_even(list_rest(list));
	}
}
/*
// EFFECTS: Returns a new list containing only the elements of the
//          original "list" which are even in value, 
//          in the order in which they appeared in list.
*/

list_t filter(list_t list, bool (*fn)(int)) {
	if(list_isEmpty(list)) {
		return list_make();
	}
	else if(fn(list_first(list))) {
		return list_make(list_first(list), filter(list_rest(list), fn));
	}
	else {
		return filter(list_rest(list), fn);
	}
}
/*
// EFFECTS: Returns a list containing precisely the elements of "list"
//          for which the predicate fn() evaluates to true, in the
//          order in which they appeared in list.
//
// For example, if predicate bool odd(int a) returns true if a is odd,
// then the function filter(list, odd) has the same behavior as the
// function filter_odd(list).
*/

list_t insert_list(list_t first, list_t second, unsigned int n) {
	if(list_isEmpty(first) && list_isEmpty(second)) {
		return list_make();
	}
	else if(list_isEmpty(second)) {
		return list_make(list_first(first), insert_list(list_rest(first), second, n));
	}
	else if(n == 0) {
		return list_make(list_first(second), insert_list(first, list_rest(second), n)); 
	}
	else {
		return list_make(list_first(first), insert_list(list_rest(first), second, n-1));
	}
}
/*
// REQUIRES: n <= the number of elements in "first".
//
// EFFECTS: Returns a list comprising the first n elements of
//          "first", followed by all elements of "second",
//           followed by any remaining elements of "first".
//
//     For example: insert (( 1 2 3 ), ( 4 5 6 ), 2)
//            gives ( 1 2 4 5 6 3 ).
*/

static list_t chop_helper(list_t list, unsigned int n) {
	if((list_isEmpty(list)) || (n == 0)) {
		return list_make();
	}
	else {
		return list_make(list_first(list), chop_helper(list_rest(list), n-1));
	}
}

list_t chop(list_t list, unsigned int n) {
	int nn = size(list) - n;
	return chop_helper(list, nn);
}
/*
// REQUIRES: "list" has at least n elements.
//
// EFFECTS: Returns the list equal to "list" without its last n
//          elements.
*/

//************************************************************
//*********                                     **************
//*********            BINARY TREE              **************
//*********                                     **************
//************************************************************

int tree_sum(tree_t tree) {
	if(tree_isEmpty(tree)) {
		return 0;
	}
	else {
		return tree_elt(tree) + tree_sum(tree_left(tree)) + tree_sum(tree_right(tree));
	}
}
/*
// EFFECTS: Returns the sum of all elements in "tree". 
//          Returns zero if "tree" is empty.
*/

static int search_helper(tree_t tree, int key) {
	if(tree_isEmpty(tree)) {
		return 0;
	}
	else if(tree_elt(tree) == key) {
		return 1;
	}
	else {
		return search_helper(tree_left(tree), key) + search_helper(tree_right(tree), key);
	}
}
bool tree_search(tree_t tree, int key) {
	if(search_helper(tree, key) > 0) {
		return true;
	}
	else {
		return false;
	}
}
/*
// EFFECTS: Returns true if there exists any element in "tree"
//          whose value is "key". Otherwise, return "false".
*/
static int max(int a, int b) {
	if(a >= b) {
		return a;
	}
	else {
		return b;
	}
}

int depth(tree_t tree) {
	if(tree_isEmpty(tree)) {
		return 0;
	}
	else {
		return 1 + max(depth(tree_left(tree)), depth(tree_right(tree)));
	}
}
/*
// EFFECTS: Returns the depth of "tree", which equals the number of
//          layers of nodes in the tree.
//          Returns zero is "tree" is empty.
//
// For example, the tree
// 
//                           4
//                         /   \
//                        /      \
//                       2        5
//                      / \      / \
//                         3        8
//                        / \      / \
//                       6   7
//                      / \ / \
//
// has depth 4.
// The element 4 is on the first layer.
// The elements 2 and 5 are on the second layer.
// The elements 3 and 8 are on the third layer.
// The elements 6 and 7 are on the fourth layer.
//
*/

static int min(int a, int b) {
	if(a <= b) {
		return a;
	}
	else {
		return b;
	}
}

int tree_min(tree_t tree) {
	if(tree_isEmpty(tree_left(tree)) && tree_isEmpty(tree_right(tree))) {
		return tree_elt(tree);
	}
	else if(tree_isEmpty(tree_left(tree))) {
		return min(tree_elt(tree), tree_min(tree_right(tree)));
	}
	else if(tree_isEmpty(tree_right(tree))) {
		return min(tree_elt(tree), tree_min(tree_left(tree)));
	}
	else {
		return min(tree_elt(tree), min(tree_min(tree_left(tree)), tree_min(tree_right(tree))));
	}
}
/*
// REQUIRES: "tree" is non-empty.
// EFFECTS: Returns the smallest element in "tree".
*/

list_t traversal(tree_t tree) {
	if(tree_isEmpty(tree)) {
		return list_make();
	}
	else {
		return append(traversal(tree_left(tree)), list_make(tree_elt(tree), traversal(tree_right(tree))));
	}
}
/* 
// EFFECTS: Returns the elements of "tree" in a list using an
//          in-order traversal. An in-order traversal prints 
//          the "left most" element first, then the second-left-most, 
//          and so on, until the right-most element is printed.
//
//          For any node, all the elements of its left subtree
//          are considered as on the left of that node and
//          all the elements of its right subtree are considered as
//          on the right of that node.
//
// For example, the tree:
// 
//                           4
//                         /   \
//                        /      \
//                       2        5
//                      / \      / \
//                         3 
//                        / \
//
// would return the list
//
//       ( 2 3 4 5 )
// 
// An empty tree would print as:
// 
//       ( )
//
*/

static int path_helper(tree_t tree, int sum) {
	if(tree_isEmpty(tree)) {
		if(sum == 0) {
			return 1;
		}
		else {
			return 0;
		}
	}
	else {
		return path_helper(tree_left(tree), (sum - tree_elt(tree))) + path_helper(tree_right(tree), (sum - tree_elt(tree)));
	}
}

bool tree_hasPathSum(tree_t tree, int sum) {
	if(path_helper(tree, sum) > 0) {
		return true;
	}
	else {
		return false;
	}
}
/* 
// EFFECTS: Returns true if and only if "tree" has at least one root-to-leaf
//          path such that adding all elements along the path equals "sum".
//          
// A root-to-leaf path is a sequence of elements in a tree starting
// with the root element and proceeding downward to a leaf (an element
// with no children).
//
// An empty tree has no root-to-leaf path.
//
// For example, the tree:
// 
//                           4
//                         /   \
//                        /     \
//                       1       5
//                      / \     / \
//                     3   6 
//                    / \ / \
//
// has three root-to-leaf paths: 4->1->3, 4->1->6 and 4->5.
// Given sum = 9, the path 4->5 has the sum 9, so the function
// should return true. If sum = 10, since no path has the sum 10,
// the function should return false.
// 
*/

bool covered_by(tree_t A, tree_t B) {return true;}
/*
// EFFECTS: Returns true if tree A is covered by tree B.
*/       

bool contained_by(tree_t A, tree_t B) {return true;}
/*
// EFFECTS: Returns true if tree A is covered by tree B
//          or a subtree of B.
*/       

tree_t insert_tree(int elt, tree_t tree) {return tree;}
/* 
// REQUIRES: "tree" is a sorted binary tree.
//
// EFFECTS: Returns a new tree with elt inserted at a leaf such that 
//          the resulting tree is also a sorted binary tree.
//
// For example, inserting 1 into the tree:
//
//                           4
//                         /   \
//                        /      \
//                       2        5
//                      / \      / \
//                         3 
//                        / \
//
// would yield
//                           4
//                         /   \
//                        /      \
//                       2        5
//                      / \      / \
//                     1   3 
//                    / \ / \
// 
*/
